{"version":3,"sources":["webpack:///./src/components/Cart/Item/index.tsx","webpack:///./src/components/Cart/index.tsx","webpack:///./src/pages/cart.tsx","webpack:///./node_modules/gatsby/node_modules/core-js/modules/es6.array.find.js"],"names":["b","b_","Item","product","id","cover","title","price","count","dispatch","useDispatch","className","src","onClick","actions","removeFromCart","Cart","products","list","useSelector","state","cart","items","map","item","find","filter","total","reduce","result","findCover","data","productName","edge","allFile","edges","node","relativePath","indexOf","childImageSharp","resize","getProducts","allProductsJson","url","path","query","CartPage","Layout","$export","$find","forced","Array","P","F","callbackfn","this","arguments","length","undefined"],"mappings":"sNAOMA,G,UAAIC,OAAQ,cAqCHC,EAvBgB,SAAC,GAG1B,QAFJC,QAAWC,EAEP,EAFOA,GAAIC,EAEX,EAFWA,MAAOC,EAElB,EAFkBA,MAAOC,EAEzB,EAFyBA,MAC7BC,EACI,EADJA,MAGMC,EAAWC,cAGjB,OACE,uBAAKC,UAAWX,KACd,uBAAKW,UAAWX,EAAE,UAChB,uBAAKY,IAAKP,KAEZ,2BACE,uBAAKM,UAAWX,EAAE,UAAWM,GAC7B,uBAAKK,UAAWX,EAAE,UAAWO,EAA7B,OAEF,uBAAKI,UAAWX,EAAE,UAAWQ,EAA7B,QACA,uBAAKG,UAAWX,EAAE,cAAea,QAXtB,kBAAMJ,EAASK,IAAQC,eAAeX,SCpBjDJ,G,UAAIC,OAAQ,SA+BHe,EApBgB,SAAC,GAAe,IAAdC,EAAc,EAAdA,SAGzBC,EAFQC,aAAY,SAACC,GAAD,OAAsBA,EAAMC,KAAKC,SAExCC,KAAK,SAAAC,GAAI,MAAK,CAC/BrB,QAASc,EAASQ,MAAK,SAAAtB,GAAO,OAAIA,EAAQC,KAAOoB,EAAKpB,MACtDI,MAAOgB,EAAKhB,UAEbkB,QAAO,SAAAF,GAAI,QAAMA,EAAKrB,WAEjBwB,EAAQT,EAAKU,QAAO,SAACC,EAAD,OAAU1B,EAAV,EAAUA,QAASK,EAAnB,EAAmBA,MAAnB,OAA8BqB,GAAU1B,EAAQI,OAAS,GAAKC,IAAO,GAE/F,OACE,uBAAKG,UAAWX,KACd,0CACCkB,EAAKK,KAAI,gBAAEpB,EAAF,EAAEA,QAASK,EAAX,EAAWA,MAAX,OAAsB,gBAAC,EAAD,CAAML,QAASA,EAASK,MAAOA,OAC9DmB,EAAQ,GAAK,uBAAKhB,UAAWX,EAAE,UAAlB,UAAoC2B,EAApC,QCpBdG,EAAY,SAACC,EAAwBC,GAAwB,IAC1DC,EAAQF,EAAKG,QAAQC,MAAMT,QAAO,mBAA4D,GAA5D,EAAEU,KAAeC,aAAaC,QAAWN,EAA7B,QADY,GAEjE,OAAOC,EAAOA,EAAKG,KAAKG,gBAAgBC,OAAO5B,IAAK,IAuBhD6B,EAAc,SAACV,GAAD,OAClBA,EAAKW,gBAAgBP,MAAM,GAAGC,KAAKnB,SAChCS,QAAO,SAAAU,GAAI,QAAMA,EAAK7B,SACtBgB,KAAI,SAAAa,GAAI,MAAK,CACZhC,GAAIgC,EAAKhC,GACTuC,IAAK,SAASP,EAAKQ,KACnBvC,MAAOyB,EAAUC,EAAMK,EAAKQ,MAC5BtC,MAAO8B,EAAK9B,MACZC,MAAO6B,EAAK7B,WAGLsC,EAAQ,YA6BNC,UAzEuB,SAAC,GAAW,IAAVf,EAAU,EAAVA,KACtC,OACE,gBAACgB,EAAA,EAAD,KACE,gBAAC,EAAD,CAAM9B,SAAUwB,EAAYV,Q,gFCPlC,IAAIiB,EAAU,EAAQ,QAClBC,EAAQ,EAAQ,OAAR,CAA4B,GAEpCC,GAAS,EADH,QAGC,IAAIC,MAAM,GAAM,MAAE,WAAcD,GAAS,KACpDF,EAAQA,EAAQI,EAAIJ,EAAQK,EAAIH,EAAQ,QAAS,CAC/CzB,KAAM,SAAc6B,GAClB,OAAOL,EAAMM,KAAMD,EAAYE,UAAUC,OAAS,EAAID,UAAU,QAAKE,MAGzE,EAAQ,OAAR,CATU","file":"component---src-pages-cart-tsx-f552121f3c2cfabaac05.js","sourcesContent":["import * as React from 'react'\nimport * as b_ from 'b_'\nimport { useDispatch } from 'react-redux';\nimport { actions } from '../../../state/actions';\n\nimport './index.scss';\n\nconst b = b_.with('cart-item')\n\nexport interface Product {\n  id: string\n  url: string\n  cover: string\n  title: string\n  price?: number\n}\ninterface Props {\n  product: Product\n  count: number\n}\n\nconst Item: React.SFC<Props> = ({\n  product: { id, cover, title, price },\n  count,\n}) => {\n\n  const dispatch = useDispatch();\n\n  const remove = () => dispatch(actions.removeFromCart(id))\n  return (\n    <div className={b()}>\n      <div className={b('photo')}>\n        <img src={cover} />\n      </div>\n      <div>\n        <div className={b('title')}>{title}</div>\n        <div className={b('price')}>{price} ₽</div>\n      </div>\n      <div className={b('count')}>{count} шт.</div>\n      <div className={b('remove-btn')} onClick={remove}/>\n    </div>\n  )\n}\n\nexport default Item\n","import * as React from 'react';\nimport * as b_ from 'b_';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../state/reducer';\nimport Item, { Product } from './Item';\n\nimport './index.scss';\n\nconst b = b_.with('cart');\n\ninterface Props {\n  products: Product[]\n}\n\ninterface CartItem {\n  product: Product,\n  count: number\n}\n\nconst Cart: React.SFC<Props> = ({products}) => {\n  const items = useSelector((state: RootState) => state.cart.items)\n\n  const list = items.map( item => ({\n    product: products.find(product => product.id === item.id),\n    count: item.count\n  }))\n  .filter(item => !!item.product) as CartItem[]\n\n  const total = list.reduce((result, {product, count}) => result + (product.price || 0) * count, 0);\n\n  return (\n    <div className={b()}>\n      <h1>Ваша корзина</h1>\n      {list.map(({product, count}) => <Item product={product} count={count} />)}\n      {total > 0 && <div className={b('total')}>Итого: {total} ₽</div>}\n    </div>\n  );\n}\n\nexport default Cart;","import * as React from 'react';\nimport { graphql } from 'gatsby';\nimport { AllProductsJson, AllFile } from '../types';\nimport Layout from '../components/Layout';\nimport Cart from '../components/Cart';\n\nconst CartPage: React.SFC<Response> = ({data}) => {\n  return (\n    <Layout>\n      <Cart products={getProducts(data)} />\n    </Layout>\n  );\n}\n\nconst findCover = (data: Response['data'], productName: string) => {\n  const [edge] = data.allFile.edges.filter(({node}) => node.relativePath.indexOf(`${productName}/`) == 0 );\n  return edge ? edge.node.childImageSharp.resize.src: '';\n}\n\ntype Response = {\n  data:\n    AllFile<{\n      relativePath: string\n      childImageSharp: {\n        resize: {\n          src: string\n        }\n      }\n    }> &\n    \n    AllProductsJson<{\n      id: string\n      path: string\n      price?: number\n      tags?: string[]\n      title: string\n    }>\n}\n\nconst getProducts = (data: Response['data']) =>\n  data.allProductsJson.edges[0].node.products\n    .filter(node => !!node.price)\n    .map(node => ({\n      id: node.id,\n      url: `/shop/${node.path}`,\n      cover: findCover(data, node.path),\n      title: node.title,\n      price: node.price\n    }));\n\nexport const query = graphql`query{\n  allFile(filter: {relativePath: {regex: \"/cover\\\\./\"}}){\n    edges{\n      node{\n        relativePath\n        childImageSharp{\n          resize(quality:95, height: 200, width: 200){\n            src\n          }\n        }\n      }\n    }\n  }\n  allProductsJson {\n    edges {\n      node {\n        products{\n          id\n          path\n          price\n          tags\n          title\n        }\n      }\n    }\n  }\n}\n`;\n\nexport default CartPage;","'use strict';\n// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)\nvar $export = require('./_export');\nvar $find = require('./_array-methods')(5);\nvar KEY = 'find';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  find: function find(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\nrequire('./_add-to-unscopables')(KEY);\n"],"sourceRoot":""}