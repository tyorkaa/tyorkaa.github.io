{"version":3,"sources":["webpack:///./src/components/Gallery/index.tsx","webpack:///./src/pages/index.tsx"],"names":["b","b_","Gallery","products","className","map","product","to","url","key","src","cover","sale","findCover","resp","productName","edge","data","allFile","edges","filter","node","relativePath","indexOf","childImageSharp","resize","query","IndexPage","props","Layout","allProductsJson","path","price"],"mappings":"4LAMMA,G,UAAIC,OAAQ,YA4BHC,EAhBC,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAF,OACd,2BAASC,UAAWJ,KACjBG,EACEE,KAAI,SAAAC,GAAO,OACZ,gBAAC,IAAD,CACEC,GAAID,EAAQE,IACZC,IAAKH,EAAQE,IACbJ,UAAWJ,EAAE,UAEb,uBAAKU,IAAKJ,EAAQK,QACjBL,EAAQM,MAAQ,uBAAKR,UAAWJ,EAAE,gBCpBrCa,EAAY,SAACC,EAAgBC,GAAwB,IAClDC,EAAQF,EAAKG,KAAKC,QAAQC,MAAMC,QAAO,mBAA4D,GAA5D,EAAEC,KAAeC,aAAaC,QAAWR,EAA7B,QADD,GAEzD,OAAOC,EAAOA,EAAKK,KAAKG,gBAAgBC,OAAOf,IAAK,IAsCzCgB,EAAQ,aA4BNC,UApCG,SAACC,GAAD,OAChB,gBAACC,EAAA,EAAD,KAEE,gBAAC,EAAD,CAAS1B,UAZQW,EAYcc,EAXjCd,EAAKG,KAAKa,gBAAgBX,MAAM,GAAGE,KAAKlB,SACrCE,KAAI,SAAAgB,GAAI,MAAK,CACZb,IAAK,WAAWa,EAAKU,KACrBpB,MAAOE,EAAUC,EAAMO,EAAKU,MAC5BnB,OAAQS,EAAKW,cALC,IAAClB,I","file":"component---src-pages-index-tsx-4e65862dd6069878fac4.js","sourcesContent":["import * as React from 'react'\nimport { Link } from 'gatsby'\nimport * as b_ from 'b_'\n\nimport './index.scss';\n\nconst b = b_.with('gallery');\n\ninterface Product {\n  url: string;\n  cover: string;\n  sale: boolean;\n}\n\ninterface Props {\n  products: Product[]\n}\n\nconst Gallery = ({products}: Props) => \n  <section className={b()}>\n    {products\n      .map(product => \n      <Link\n        to={product.url}\n        key={product.url}\n        className={b(\"photo\")}\n      >\n        <img src={product.cover} />\n        {product.sale && <div className={b(\"sale\")} />}\n      </Link>\n    )}  \n  </section>\n\n\nexport default Gallery;","import * as React from 'react'\nimport { AllProductsJson, AllFile } from '../types';\nimport { graphql } from 'gatsby';\nimport Layout from '../components/Layout'\nimport About from '../components/About'\nimport Gallery from '../components/Gallery'\nimport Socials from '../components/Socials'\n\nconst findCover = (resp: Response, productName: string) => {\n  const [edge] = resp.data.allFile.edges.filter(({node}) => node.relativePath.indexOf(`${productName}/`) == 0 );\n  return edge ? edge.node.childImageSharp.resize.src: '';\n}\n\ntype Response = {\n  data:\n    AllFile<{\n      relativePath: string\n      childImageSharp: {\n        resize: {\n          src: string\n        }\n      }\n    }> &\n    \n    AllProductsJson<{\n      id: number\n      path: string\n      price?: number\n    }>\n}\n\nconst getProducts = (resp: Response) =>\n  resp.data.allProductsJson.edges[0].node.products\n    .map(node => ({\n      url: `/single/${node.path}`,\n      cover: findCover(resp, node.path),\n      sale: !!node.price\n    }));\n\n\nconst IndexPage = (props: Response) => (\n  <Layout>\n    {/* <About /> */}\n    <Gallery products={getProducts(props)}/>\n  </Layout>\n)\n\n\nexport const query = graphql`query{\n  allFile(filter: {relativePath: {regex: \"/cover\\\\./\"}}){\n    edges{\n      node{\n        relativePath\n        childImageSharp{\n          resize(quality:95, height: 200){\n            src\n          }\n        }\n      }\n    }\n  }\n  allProductsJson {\n    edges {\n      node {\n        products{\n          id\n          path\n          price\n          tags\n        }\n      }\n    }\n  }\n}\n`;\n\nexport default IndexPage\n"],"sourceRoot":""}