{"version":3,"sources":["webpack:///./src/components/Single/components/MobileSlider/components/Slider/index.tsx","webpack:///./src/components/Single/components/MobileSlider/index.tsx","webpack:///./src/components/Single/index.tsx","webpack:///./src/templates/single.tsx"],"names":["Slider","_React$Component","props","_this","call","this","container","slide","direction","setState","current","state","updateWidth","width","getBoundingClientRect","onTouchMove","e","touchStartPosition","touchPosition","getTouchPosition","touches","pageX","onTouchStart","isScrolling","onTouchEnd","getCurrent","inheritsLoose_default","_proto","prototype","render","_this2","_this$props","className","count","_this$state","Component","component","to","react","ref","el","range","map","i","key","index","x","_this$state2","distance","Math","round","newCurrent","abs","componentDidMount","window","addEventListener","document","componentWillUnmount","removeEventListener","componentDidUpdate","prevProps","prevState","onSlide","React","b","b_","MobileSlider","zoomed","pics","Slider_Slider","length","sliderProps","renderSlide","n","pic","position","smooth","style","left","src","preview","Single","title","description","price","Single_components_MobileSlider","query","formatPics","data","allFile","edges","_ref2","node","name","childImageSharp","resize","original","SinglePage","_ref","src_components_Single","allProductsJson"],"mappings":"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","file":"component---src-templates-single-tsx-7f6de68ceaa130aa16aa.js","sourcesContent":["import * as React from 'react';\nimport { range } from 'lodash';\n\ninterface Props {\n  current?: number;\n  className?: string;\n  component: React.ComponentClass<SlideProps> | React.SFC<SlideProps>;\n  onSlide?: (current: number) => void;\n  count?: number;\n}\n\ninterface SliderCommonState {\n  width: number;\n  current: number;\n  touchPosition: number;\n  isScrolling: boolean;\n}\n\nexport interface SlideProps extends SliderCommonState {\n  index: number;\n  slide: (direction: number) => void;\n}\n\ninterface State extends SliderCommonState {\n  touchStartPosition: number;\n}\n\nexport class Slider extends React.Component<Props, State> {\n  private container: HTMLDivElement | null = null;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      width: 0,\n      current: props.current || 0,\n      touchPosition: 0,\n      touchStartPosition: 0,\n      isScrolling: true\n    };\n  }\n\n  render() {\n    const { className, count } = this.props;\n    const { current, width, touchPosition, isScrolling } = this.state;\n    const Component = this.props.component;\n\n    const from = 0;\n    const to = count;\n\n    return (\n      <div className={className} ref={el => (this.container = el)}>\n        {width &&\n          range(from, to).map(i => (\n            <Component\n              key={i}\n              index={i}\n              width={width}\n              current={current}\n              touchPosition={touchPosition}\n              isScrolling={isScrolling}\n              slide={this.slide}\n            />\n          ))}\n      </div>\n    );\n  }\n\n  private slide = (direction: number) => {\n    this.setState({ current: this.state.current + direction });\n  };\n\n  private updateWidth = () => {\n    if (this.container) {\n      const { width } = this.container.getBoundingClientRect();\n      this.setState({ width });\n    }\n  };\n\n  private onTouchMove = (e: TouchEvent) => {\n    const { touchStartPosition } = this.state;\n    this.setState({\n      touchPosition: this.getTouchPosition(e.touches[0].pageX - touchStartPosition)\n    });\n  };\n\n  private onTouchStart = (e: TouchEvent) => {\n    this.setState({\n      touchStartPosition: e.touches[0].pageX,\n      isScrolling: true\n    });\n  };\n\n  private onTouchEnd = (e: TouchEvent) => {\n    this.setState({\n      current: this.getCurrent(),\n      touchPosition: 0,\n      isScrolling: false\n    });\n  };\n\n  private getTouchPosition(x: number) {\n    const { count } = this.props;\n    const { current } = this.state;\n    // bounce\n    if (count && ((current === 0 && x > 0) || (current === count - 1 && x < 0))) {\n      return x / 10;\n    }\n    return x;\n  }\n\n  private getCurrent() {\n    const { count } = this.props;\n    const { width, touchPosition, current } = this.state;\n\n    const distance = Math.round(touchPosition / (width / 2));\n    const newCurrent = current - (distance ? distance / Math.abs(distance) : 0);\n\n    if (count) {\n      if (newCurrent < 0) {\n        return 0;\n      }\n      if (newCurrent > count - 1) {\n        return count - 1;\n      }\n    }\n    return newCurrent;\n  }\n\n  componentDidMount() {\n    this.updateWidth();\n    window.addEventListener('resize', this.updateWidth);\n    window.document.addEventListener('resize', this.updateWidth);\n    if (this.container) {\n      this.container.addEventListener('touchmove', this.onTouchMove);\n      this.container.addEventListener('touchstart', this.onTouchStart);\n      this.container.addEventListener('touchend', this.onTouchEnd);\n      this.container.addEventListener('touchcancel', this.onTouchEnd);\n    }\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateWidth);\n    if (this.container) {\n      this.container.removeEventListener('touchmove', this.onTouchMove);\n      this.container.removeEventListener('touchstart', this.onTouchStart);\n      this.container.removeEventListener('touchend', this.onTouchEnd);\n      this.container.removeEventListener('touchcancel', this.onTouchEnd);\n    }\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    const { onSlide } = this.props;\n    const { current } = this.state;\n\n    if (current !== prevState.current && onSlide) {\n      onSlide(current);\n    }\n  }\n}\n\nexport default Slider;\n","import * as React from 'react'\nimport * as b_ from 'b_';\nimport {Slide} from '../../types';\nimport {Slider, SlideProps} from './components/Slider';\n\nimport './index.scss';\n\nconst b = b_.bind(null, 'mobile-slider');\n\ninterface Props {\n  pics: Slide[];\n}\n\ninterface State {\n  current: number;\n  zoomed: boolean;\n  mouseX?: number;\n  mouseY?: number;\n}\n\nclass MobileSlider extends React.Component<Props, State> {\n\n  state: State = {current: 0, zoomed: false}\n\n  render(){\n    const {pics } = this.props;\n    const {current} = this.state;\n    return (\n      <Slider\n        className={b()}\n        count={pics.length}\n        current={current}\n        component={sliderProps => this.renderSlide(sliderProps)}\n      />);\n  }\n\n  private renderSlide(sliderProps: SlideProps){\n    const { pics } = this.props;\n    const n = pics.length;\n\n    const {width, touchPosition, index, current, isScrolling} = sliderProps;\n    const pic = pics[(n + index)%n];\n\n    const position = (index - current) * width + touchPosition;\n\n    return (\n      <div\n        className={b('image-wrap', {smooth: true  })}\n        style={{left: `${position}px`}}\n      >\n        <img\n          className={b(\"image\")}\n          src={pic.preview.src}\n        />\n      </div>      \n    );\n  }\n}\n\nexport default MobileSlider;","import * as React from 'react'\nimport * as b_ from 'b_'\nimport Slider from './components/MobileSlider';\nimport {Slide} from './types';\n\nimport './index.scss';\n\nconst b = b_.bind(null, 'single');\n\ninterface Props {\n  pics: Slide[];\n  title?: string;\n  description?: string;\n  price?: number;\n}\n\nclass Single extends React.Component<Props> {\n\n  render(){\n    const { pics, title, description, price } = this.props;\n    return (\n      <section className={b()}>\n        <Slider pics={pics} />\n        <div className={b('title')}>{title}</div>\n        <div className={b('description')}>{description}</div>\n        {!!price && \n          <>\n            <div className={b('price')}>Цена: <span>{price} Р</span></div>\n            <button className={b('buy-btn')}>Купить</button>\n          </>\n        }\n      </section>)\n  }\n}\n\nexport default Single;","import * as React from 'react'\nimport { Link, graphql, StaticQuery } from 'gatsby'\nimport Layout from '../components/Layout'\nimport Single from '../components/Single'\n\ninterface Response {\n  allFile: {\n    edges: {\n      node: {\n        name: string;\n        childImageSharp: {\n          resize: {\n            src: string;\n            width: number;\n            height: number;\n          }\n          original: {\n            src: string;\n            width: number;\n            height: number;\n          }\n        }\n      }\n    }[]\n  }\n  allProductsJson: {\n    edges: {\n      node: {\n        title?: string;\n        description?: string;\n        price?: number\n      }\n    }[]\n  }\n}\n\ninterface Props {\n  data: Response;\n}\n\nconst SinglePage = ({ data }: Props) => (\n  <Single\n    pics={formatPics(data)}\n    title={data.allProductsJson.edges[0].node.title}\n    description={data.allProductsJson.edges[0].node.description}\n    price={data.allProductsJson.edges[0].node.price}\n  />\n)\n\n\nexport const query = graphql`\n  query($slug: String!){\n    allFile(filter: {relativeDirectory: {eq: $slug }}){\n      edges{\n        node{\n          name\n          childImageSharp{\n            resize(height: 500, quality: 95){\n              src\n              width\n              height\n            }\n\n            original{\n              src\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n    allProductsJson(filter: {path: {eq: $slug}}){\n      edges {\n        node {\n          title\n          description\n          price\n        }\n      }\n    }\n  }\n`;\n\nconst formatPics = (data: Response) => data.allFile.edges.map(({node}) => ({\n  name: node.name,\n  preview: node.childImageSharp.resize,\n  original: node.childImageSharp.original\n}));\n\nexport default SinglePage;"],"sourceRoot":""}